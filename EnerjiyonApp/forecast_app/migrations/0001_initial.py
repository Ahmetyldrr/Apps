# Generated by Django 5.2.5 on 2025-08-07 13:15

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AIAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('analysis_type', models.CharField(choices=[('data_trends', 'Veri Trend Analizi'), ('model_performance', 'Model Performans Değerlendirmesi'), ('forecast_insights', 'Tahmin Öngörüleri'), ('energy_market_analysis', 'Enerji Piyasası Analizi')], max_length=50, verbose_name='Analiz Türü')),
                ('content', models.TextField(verbose_name='İçerik')),
                ('status', models.CharField(default='success', max_length=20, verbose_name='Durum')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Oluşturulma Tarihi')),
            ],
            options={
                'verbose_name': 'AI Analizi',
                'verbose_name_plural': 'AI Analizleri',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ModelPerformance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_name', models.CharField(choices=[('linear', 'Linear Regression'), ('polynomial', 'Polynomial Regression'), ('arima', 'ARIMA'), ('exponential', 'Exponential Smoothing'), ('lstm', 'LSTM Neural Network'), ('random_forest', 'Random Forest')], max_length=50)),
                ('mae', models.FloatField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='Mean Absolute Error')),
                ('mse', models.FloatField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='Mean Squared Error')),
                ('rmse', models.FloatField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='Root Mean Squared Error')),
                ('r2_score', models.FloatField(validators=[django.core.validators.MinValueValidator(-1), django.core.validators.MaxValueValidator(1)], verbose_name='R² Score')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Model Performansı',
                'verbose_name_plural': 'Model Performansları',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EnergyMarketData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('hour', models.TimeField()),
                ('ptf', models.FloatField(help_text='Piyasa Takas Fiyatı', verbose_name='PTF (TL/MWh)')),
                ('smf', models.FloatField(help_text='Sistem Marjinal Fiyatı', verbose_name='SMF (TL/MWh)')),
                ('positive_imbalance_price', models.FloatField(verbose_name='Pozitif Dengesizlik Fiyatı (TL/MWh)')),
                ('negative_imbalance_price', models.FloatField(verbose_name='Negatif Dengesizlik Fiyatı (TL/MWh)')),
                ('smf_direction', models.CharField(choices=[('enerji_acigi', 'Enerji Açığı'), ('enerji_fazlasi', 'Enerji Fazlası'), ('dengede', 'Dengede')], max_length=20, verbose_name='SMF Yön')),
                ('predicted_smf_direction', models.CharField(blank=True, choices=[('enerji_acigi', 'Enerji Açığı'), ('enerji_fazlasi', 'Enerji Fazlası'), ('dengede', 'Dengede')], max_length=20, null=True, verbose_name='Tahmin Edilen SMF Yön')),
                ('prediction_confidence', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Tahmin Güvenilirliği')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Enerji Piyasası Verisi',
                'verbose_name_plural': 'Enerji Piyasası Verileri',
                'ordering': ['date', 'hour'],
                'unique_together': {('date', 'hour')},
            },
        ),
        migrations.CreateModel(
            name='ForecastData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('actual_value', models.FloatField(blank=True, null=True)),
                ('predicted_value', models.FloatField(blank=True, null=True)),
                ('error', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Tahmin Verisi',
                'verbose_name_plural': 'Tahmin Verileri',
                'ordering': ['-date'],
                'unique_together': {('date',)},
            },
        ),
    ]
